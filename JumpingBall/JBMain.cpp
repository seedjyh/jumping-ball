#pragma comment(lib, "winmm")
#pragma comment(lib, "comctl32.lib")
#include <math.h>
#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <string>
#include <vector>
#include <wtypes.h>
#include <windowsx.h>
#include <winbase.h>
#include <windows.h>
#include <winuser.h>
#include <tchar.h>
#include <psapi.h>
#include <time.h>
#include <dos.h>
#include <conio.h>
#include "JBFunction.h"
#include "resource.h"
//using namespace std;


LRESULT CALLBACK WndProc (HWND, UINT, WPARAM, LPARAM) ;
//窗口消息处理程序	（窗口句柄，消息类型，消息数据1，消息数据2）


unsigned short pic_fly[32][32]={
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
		,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
		,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x0,0x0,0x0,0x0,0x8C71,0x0,0x0,0x0,0x0,0x0,0x0
	,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x0,0x0,0x0,0x0,0x94B2,0x9CF3,0x0,0x0,0x0,0x0,0x0
	,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x0,0x0,0x0,0x632C,0x9CF3,0xFFDF,0x0,0x0,0x0,0x0,0x0
	,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x0,0x0,0x0,0x632C,0xAD75,0xFFDF,0x0,0x0,0x0,0x0,0x0
	,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x0,0x0,0x3186,0x632C,0xAD75,0xFFDF,0xCE79,0x0,0x0,0x0,0x0
	,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x0,0x0,0x3186,0x73AE,0xB5B6,0xFFDF,0xCE79,0x0,0x0,0x0,0x0
	,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x0,0x0,0x3186,0x9CF3,0xBDF7,0xFFDF,0xCE79,0x0,0x0,0x0,0x0
	,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x0,0x0,0x39C7,0x9CF3,0x2945,0xFFDF,0xCE79,0x0,0x0,0x0,0x0
	,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x0,0x0,0x5AEB,0x18C3,0x2945,0x7BEF,0xFFDF,0x0,0x0,0x0,0x0
	,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x0,0x0,0x5AEB,0x18C3,0x4208,0x632C,0xCE79,0x0,0x0,0x0,0x0
	,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2104,0x94B2,0xFFDF,0x0
	,0x0,0x0,0x4A49,0x18C3,0x39C7,0x6B6D,0xC638,0x0,0x0,0x0,0x73AE
	,0xFFDF,0x9CF3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3186,0x9CF3,0xFFDF,0xA534
	,0x0,0xBDF7,0x4A49,0x2104,0x39C7,0x632C,0xC638,0xC638,0x0,0x2945,0x6B6D
	,0xFFDF,0xC638,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x39C7,0x9CF3,0xEF5D,0xCE79
	,0x6020,0xBDF7,0x0,0x2104,0x4208,0x5AEB,0x18C3,0xBDF7,0xDB4D,0x39C7,0x9CF3
	,0xFFDF,0xC638,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x39C7,0x9CF3,0xEF5D,0xCE79
	,0x8904,0xBDF7,0x0,0x2104,0x4208,0x528A,0x18C3,0xBDF7,0x9945,0x4208,0xA534
	,0xFFDF,0xC638,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x39C7,0x9CF3,0xDEFB,0xC638
	,0x8904,0x8904,0x2104,0x7BEF,0xB5B6,0xD6BA,0x73AE,0x9945,0x9945,0x4208,0xA534
	,0xEF5D,0xBDF7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1082,0x4208,0x6B6D,0x4208
	,0x8904,0x8904,0x4A49,0x7BEF,0xB5B6,0xCE79,0xB5B6,0x9945,0x9945,0x1082,0x4208
	,0x6B6D,0x4208,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1082,0x4208,0x6B6D,0x4208
	,0x88E3,0x8904,0x4A49,0x632C,0xAD75,0xC638,0xB5B6,0x8904,0x9945,0x1082,0x4208
	,0x632C,0x4208,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x39C7,0x9CF3,0xDEFB,0xBDF7
	,0x88E3,0x8904,0x39C7,0x6B6D,0xAD75,0xBDF7,0xB5B6,0x8904,0x8904,0x4208,0xA534
	,0xDEFB,0xB5B6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x6020,0x4208,0x9CF3,0xDEFB,0xBDF7
	,0x88E3,0x88E3,0x39C7,0x632C,0xAD75,0xB5B6,0xB5B6,0x8904,0x8904,0x4208,0xA534
	,0xDEFB,0xB5B6,0xDB4D,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x6020,0x88E3,0x4208,0x9CF3,0xD6BA,0xBDF7
	,0x88E3,0x7082,0x39C7,0x5AEB,0x9CF3,0xA534,0xB5B6,0x8904,0x8904,0x4208,0xA534
	,0xD6BA,0xB5B6,0x9945,0xDB4D,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x6020,0x88E3,0x88E3,0x39C7,0x9CF3,0xD6BA,0xBDF7
	,0x88E3,0x88E3,0x39C7,0x39C7,0x78A2,0x8C71,0xB5B6,0x8904,0x8904,0x4208,0xA534
	,0xD6BA,0xB5B6,0x9945,0x9945,0xCACB,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x88E3,0x88E3,0x88E3,0x39C7,0x9CF3,0xD6BA,0xA534
	,0x88E3,0x88E3,0x39C7,0x5AEB,0x78A2,0xEF5D,0xAD75,0x8904,0x8904,0x39C7,0xA534
	,0xD6BA,0xB5B6,0x9945,0x9945,0x9945,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x88E3,0x88E3,0x88E3,0x88E3,0x39C7,0x9CF3,0xDEFB,0xA534
	,0x88E3,0x88E3,0x39C7,0x5AEB,0x78A2,0xDEFB,0xAD75,0x8904,0x8904,0x39C7,0xA534
	,0xD6BA,0xB5B6,0x8904,0x8904,0x9945,0x9945,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x6020,0x88E3,0x88E3,0x88E3,0x88E3,0x4208,0x9CF3,0xD6BA,0xA534
	,0x88E3,0x88E3,0x39C7,0x5AEB,0x88E3,0xEF5D,0xAD75,0x8904,0x8904,0x39C7,0xA534
	,0xDEFB,0xB5B6,0x8904,0x8904,0x8904,0x9945,0xCACB,0x0,0x0,0x0 },
	{0x0,0x6020,0x88E3,0x88E3,0x88E3,0x88E3,0x88E3,0x1082,0x4208,0x632C,0x88E3
	,0x88E3,0x88E3,0x39C7,0x5AEB,0x88E3,0xEF5D,0x9CF3,0x8904,0x8904,0x8904,0x4208
	,0x632C,0x39C7,0x8904,0x8904,0x8904,0x8904,0x8904,0xCACB,0x0,0x0 },
	{0x0,0x88E3,0x88E3,0x88E3,0x88E3,0x88E3,0x88E3,0x1082,0x4208,0x632C,0x88E3
	,0x88E3,0x7082,0x39C7,0x5AEB,0x88E3,0xEF5D,0xA534,0x8904,0x8904,0x8904,0x4208
	,0x632C,0x39C7,0x8904,0x8904,0x8904,0x8904,0x8904,0x88E3,0x0,0x0 },
	{0x0,0x0,0x88E3,0x88E3,0x88E3,0x88E3,0x8904,0x4A49,0xA534,0xD6BA,0xA534
	,0x7082,0x7082,0x39C7,0x5AEB,0x88E3,0xDEFB,0xA534,0x8904,0x8904,0x39C7,0xA534
	,0xD6BA,0xAD75,0x9124,0x8904,0x8904,0x8904,0x88E3,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x88E3,0x88E3,0x88E3,0x0,0x5AEB,0x9CF3,0xDEFB,0xAD75
	,0x88E3,0x7082,0x39C7,0x5AEB,0x88E3,0xDEFB,0xAD75,0x88E3,0x88E3,0x39C7,0xA534
	,0xEF5D,0xBDF7,0x0,0x8904,0x8904,0x88E3,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x2945,0x632C,0xA534,0xCE79,0xBDF7
	,0x0,0x0,0x39C7,0x5AEB,0x88E3,0xDEFB,0xAD75,0x0,0x0,0x5AEB,0xAD75
	,0xCE79,0xBDF7,0x7BEF,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4A49,0x4A49,0x4A49,0x4208
	,0x0,0x0,0x2945,0x5AEB,0x3800,0xD6BA,0x8430,0x0,0x0,0x4208,0x4A49
	,0x4A49,0x4A49,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
	{0x0,0x0,0x0,0x0,0x0,0x0,0x2104,0x5AEB,0x94B2,0xEF5D,0xFFDF
	,0x0,0x0,0x0,0x528A,0x5AEB,0x632C,0x0,0x0,0x0,0x6B6D,0x94B2
	,0xF79E,0xFFDF,0x94B2,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },
};

int WINAPI WinMain (HINSTANCE	hInstance,
					HINSTANCE	hPrevInstance,
					PSTR		szCmdLine,
					int			iCmdShow)
{
	int	cxClient, cyClient;
	RECT	rectMain;
	POINT	pTemp;



	static		TCHAR szAppName[] = TEXT ("JumpingBall") ;
	HWND		hwnd ;
	MSG			msg ;
	WNDCLASS	wndclass ;
	wndclass.style			= CS_HREDRAW | CS_VREDRAW ;

	wndclass.lpfnWndProc	= WndProc ;
	wndclass.cbClsExtra		= 0 ;
	wndclass.cbWndExtra		= 0 ;
	wndclass.hInstance		= hInstance ;
	wndclass.hIcon			= LoadIcon (NULL, IDI_APPLICATION) ;
	wndclass.hCursor		= LoadCursor (NULL, IDC_ARROW) ;
	wndclass.hbrBackground	= (HBRUSH) GetStockObject (WHITE_BRUSH) ;
	wndclass.lpszMenuName	= NULL ;
	wndclass.lpszClassName	= szAppName ;

	if (!RegisterClass (&wndclass))
	{
		MessageBox (NULL,
			TEXT ("This program requires Windows NT!"),
			szAppName,
			MB_ICONERROR) ;
		return 0 ;
	}

	hwnd	= CreateWindow(	szAppName,					// window class name
		TEXT ("JumpingBall"),				// window caption
		WS_OVERLAPPEDWINDOW & ~WS_THICKFRAME & ~WS_CAPTION,		// window style
		0,				// initial x position
		0,				// initial y position
		CW_USEDEFAULT,				// initial x size
		CW_USEDEFAULT,				// initial y size
		NULL,						// parent window handle
		NULL,						// window menu handle
		hInstance,					// program instance handle
		NULL) ;						// creation parameters
	ShowWindow (hwnd, iCmdShow) ;
	UpdateWindow (hwnd) ;

	GetClientRect(hwnd, &rectMain);
	cxClient	= rectMain.right - rectMain.left;
	cyClient	= rectMain.bottom- rectMain.top;
	pTemp.x		= cxClient/3;
	pTemp.y		= cyClient/3;
	//	while (GetMessage (&msg, NULL, 0, 0))
	while (GetMessage (&msg, NULL, 0, 0))
	{
		TranslateMessage (&msg) ;
		DispatchMessage (&msg) ;
	}
	return msg.wParam ;
}


LRESULT CALLBACK WndProc (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	static	int		iTimeCounter;	//0.01second
	static	BOOL	bPause;
	static	HDC		hDC, hMemDC, hBallDC;
	static	HBITMAP	hBitmap, hOldBitmap, hFoodBitmap, hBallBitmap;


	PAINTSTRUCT		ps ;
	POINT			pTemp;

	static	BOARD	bdBoard;
	static	BALL	blBall;
	static	HINSTANCE	hInstance ;
	static	RECT	rect ;


	static	int		cxChar, cyChar;
	static	int		cxClient, cyClient;	//窗口宽度和高度
	static	BOOL	Pause;
	int	i, j;

	RECT	rectText;
	static	RECT	hrect;

	TCHAR	szStr[128];


	switch (message)
	{
	case WM_CREATE:
		SendMessage(hwnd,
			WM_SETICON,
			(WPARAM)TRUE,
			(LPARAM)LoadIcon(GetModuleHandle(NULL),
			(LPCTSTR)IDI_ICON1));
		MessageBox(hwnd, "JumpingBall v0.6.0，冰火梦幻个人作品。", "欢迎试用", MB_OK);
		//initialization
		iTimeCounter	= 0;
		SetTimer(hwnd, TIMER_SEC, TIME_REFRESH, NULL) ;
		SetTimer(hwnd, TIMER_COUNTER, TIME_COUNTER, NULL);
		GetClientRect (hwnd, &rect) ;	//
		cxClient	= rect.right-rect.left;
		cyClient	= rect.bottom-rect.top;
		cxChar	= LOWORD(GetDialogBaseUnits());
		cyChar	= HIWORD(GetDialogBaseUnits());

		bPause	= false;
		bdBoard.Reset(cxClient);
		

		blBall.Reset(cxClient);
		return 0;
	case WM_TIMER:
		switch (wParam)
		{
		case TIMER_SEC:
			if (FALSE == Pause)
			{
				hDC		= GetDC(hwnd);
				hMemDC	= CreateCompatibleDC(hDC);
				GetClientRect(hwnd, &rect);

				hBallBitmap	= (HBITMAP)LoadImage(NULL, TEXT("bitmap1.bmp"), IMAGE_BITMAP,
					32, 32, LR_DEFAULTCOLOR | LR_LOADFROMFILE);

				hBitmap	= CreateCompatibleBitmap(hDC, rect.right, rect.bottom);
				hOldBitmap	= (HBITMAP)SelectObject(hMemDC, hBitmap);
				///////Draw start
				if (false == blBall.bAlive)
				{
					DrawTime(hMemDC, cxClient-15*cxChar, 5, iTimeCounter);
					DrawRestart(hMemDC, cxClient/2-8*cxChar, cyClient/2-3 * cyChar);
				}
				else if (true == bPause)
				{
					DrawPause(hMemDC, cxClient/2-3*cxChar, cyClient/2-5 * cyChar);
					blBall.Draw(hMemDC);

				
					bdBoard.Draw(hMemDC, cyClient);
					DrawTime(hMemDC, cxClient-15*cxChar, 5, iTimeCounter);
				}
				else
				{
					if (true == blBall.Move(cxClient, cyClient,
						bdBoard.ixPosition, bdBoard.iWide))
					{
						PlaySound(TEXT("Collision.wav"), NULL, SND_FILENAME | SND_ASYNC);
					}
					blBall.Draw(hMemDC);
					
					bdBoard.Move(cxClient);
					bdBoard.Draw(hMemDC, cyClient);
					//	int	i, j;

					for (i=0 ; i<32 ; i++)
					{
						for(j=0 ; j<32 ; j++)
						{
							SetPixel(hMemDC, bdBoard.ixPosition+j-16, cyClient-BOARD_HEIGHT+i, pic_fly[i][j]);
						}
					}
					DrawTime(hMemDC, cxClient-15*cxChar, 5, iTimeCounter);
				}
				//////Draw over


				BitBlt(hDC,	0,	0,	cxClient,	cyClient,
					hMemDC,	0, 0, SRCCOPY);

				SelectObject(hMemDC, hOldBitmap);
				DeleteDC(hMemDC);
				ReleaseDC(hwnd, hDC);
				DeleteObject(hBitmap);
			}
			break;
		case TIMER_COUNTER:
			if (true == blBall.bAlive)
			{
				iTimeCounter++;
				if (0 == iTimeCounter%100 && bdBoard.iWide>10)
				{
					bdBoard.iWide--;
				}
			}
			break;
		}
		return 0;
	case	WM_KEYDOWN:
		switch (wParam)
		{
		case	VK_LEFT:
			if (bdBoard.iMoveDirection>0)
			{
				bdBoard.iMoveDirection=0;
			}
			if (bdBoard.iMoveDirection > -MAX_BOARD_SPEED)
			{
				bdBoard.iMoveDirection-=BOARD_ACCELERATION;
			}
			break;
		case	VK_RIGHT:
			if (bdBoard.iMoveDirection<0)
			{
				bdBoard.iMoveDirection=0;
			}
			if (bdBoard.iMoveDirection < MAX_BOARD_SPEED)
			{
				bdBoard.iMoveDirection+=BOARD_ACCELERATION;
			}
			break;
		case	'P':
			if (true == blBall.bAlive)
			{
				bPause	=!bPause;
			}
			break;
		case	VK_ESCAPE:
			PostQuitMessage (0) ;
			break;
		}
		return 0;
	case WM_KEYUP:
		switch (wParam)
		{
		case	VK_LEFT:
			if (bdBoard.iMoveDirection<0)
			{
				bdBoard.iMoveDirection=0;
			}
			break;
		case	VK_RIGHT:
			if (bdBoard.iMoveDirection>0)
			{
				bdBoard.iMoveDirection=0;
			}
			break;
		case	VK_RETURN:
			blBall.Reset(cxClient);
			bdBoard.Reset(cxClient);
			iTimeCounter	= 0;
			break;
		}
		return 0;
	case   WM_COMMAND :
		return 0;
	case	WM_LBUTTONUP:
		return 0;
	case	WM_RBUTTONUP:
		return 0;
	case	WM_SIZE:
		cxClient = LOWORD (lParam) ;
		cyClient = HIWORD (lParam) ;
		rect.right	= rect.left + cxClient;
		rect.bottom	= rect.top + cyClient;
		return 0 ;
	case   WM_PAINT:
		hDC = BeginPaint (hwnd, &ps) ;
		EndPaint (hwnd, &ps) ;
		return 0 ;
	case   WM_DESTROY:
		PostQuitMessage (0) ;
		return 0 ;
	}
	return DefWindowProc (hwnd, message, wParam, lParam) ;
}